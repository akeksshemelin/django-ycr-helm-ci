apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.app.name }}
spec:
  replicas: {{ .Values.app.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.app.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.app.name }}
    spec:
      imagePullSecrets:
      - name: {{ index .Values.image.imagePullSecrets 0 }}

      # ЖДЕМ ГОТОВНОСТИ БД
      initContainers:
      - name: wait-for-db
        image: postgres:15
        envFrom:
        - secretRef: { name: db-secret }
        - configMapRef: { name: app-env }
        command: ["sh","-c"]
        args:
          - |
            echo "Waiting for Postgres at ${DB_HOST:-postgres}:${DB_PORT:-5432} ...";
            until pg_isready -h "${DB_HOST:-postgres}" -p "${DB_PORT:-5432}" -U "${POSTGRES_USER}"; do
              sleep 2;
            done
            echo "Postgres is ready."

      containers:
      - name: web
        image: "{{ .Values.image.registry }}/{{ .Values.image.repo }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.app.port }}
        envFrom:
        - configMapRef: { name: app-env }
        - secretRef: { name: db-secret }
        command: ["sh","-c"]
        args:
          - |
            python manage.py migrate &&
            python manage.py collectstatic --noinput &&
            gunicorn app.wsgi:application --bind 0.0.0.0:{{ .Values.app.port }}

        readinessProbe:
          httpGet:
            path: /
            port: {{ .Values.app.port }}
          initialDelaySeconds: 10
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /
            port: {{ .Values.app.port }}
          initialDelaySeconds: 30
          periodSeconds: 20
